#include <Wire.h> // Must include Wire library for I2C
#include "SparkFun_MMA8452Q.h" // Includes the SFE_MMA8452Q library

MMA8452Q accel;

const int row[7] = {8,7,6,5,4,3,2};
const int col[5] = {9,10,11,12,13};
const int fps = 5;
int board[5][7];

unsigned int prey_move_interval = 250;
unsigned int predator_move_interval = 500;
unsigned long prey_last_move_time = 0;
unsigned long predator_last_move_time = 0;

unsigned long round_interval = 15000;
unsigned long round_start_time = 0;
unsigned long result_interval = 4000;
unsigned long result_start_time = 0;
unsigned long blink_duration = 250;
unsigned long predator_last_blink_time = 0;

bool prey_win = false;
bool predator_win = false;
unsigned int num_win_prey = 0;
unsigned int num_win_predator = 0;

struct prey_{
  bool win = false;
  int x = 0, y = 0;
  int coord = 0;
  int num_win = 0;
};

struct predator_{
  bool win = false;
  int x = 0, y = 0;
  int coord = 0;
  int num_win = 0;
};

struct predator_ predator;
struct prey_ prey;
 
void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  // initialize the display
  for (int i = 0; i < 7; ++i){
    pinMode(row[i], OUTPUT);
    digitalWrite(row[i], LOW);
  }
  for (int i = 0; i < 5; ++i){
    pinMode(col[i], OUTPUT);
    digitalWrite(col[i], HIGH);
  }
  randomSeed(analogRead(0));
  accel.init();
}

//methods outline--Zihao

//initialize the board
void initBoard(){
  for (int i = 0; i < 5; ++i){
    for (int j = 0; j < 7; ++j){
      board[i][j] = LOW;
    }
  }
  prey.x = random(0,5);
  prey.y = random(0,7);
  predator.x = random(0,4);
  predator.y = random(0,6);
  //gen new rand if prey/predator overlaps
  while (checkPredatorWin()){
    predator.x = random(0,4);
    predator.y = random(0,6);    
  }
  board[prey.x][prey.y] = 1;

  board[predator.x][predator.y] = 1;
  board[predator.x + 1][predator.y] = 1;
  board[predator.x][predator.y + 1] = 1;
  board[predator.x + 1][predator.y + 1] = 1;  
}

//print the board on the 5*7 display
void printBoard(){
  for (int i = 0; i < 5; ++i){
    digitalWrite(col[i], LOW);
    for (int j = 0; j < 7; ++j){
      digitalWrite(row[j],board[i][j]);
      delayMicroseconds(100);
      digitalWrite(col[i], HIGH);
    }
  }
}

//prey moves by tilting the board
//every 250ms
void preyMove(){
  
}

//predator blinks every 250ms
void predatorBlink(){
  if (millis() - predator_last_blink_time >= blink_duration){
    board[predator.x][predator.y] = !board[predator.x][predator.y];
    board[predator.x + 1][predator.y] = !board[predator.x + 1][predator.y];
    board[predator.x][predator.y + 1] = !board[predator.x][predator.y + 1];
    board[predator.x + 1][predator.y + 1] = !board[predator.x + 1][predator.y + 1]; 
    predator_last_blink_time = millis();
  }
}

//predator moves by java side's input
//every 500ms
void predatorMove(){
  if (Serial.available()){
    byte temp = Serial.read();
    if (millis() - predator_last_move_time >= predator_move_interval){
      board[predator.x][predator.y] = 0;
      board[predator.x + 1][predator.y] = 0;
      board[predator.x][predator.y + 1] = 0;
      board[predator.x + 1][predator.y + 1] = 0;
      switch(temp){
        case 1://up
          if(predator.y < 5)
          {
            ++predator.y;
          }
          break;
        case 2://down
          if(predator.y > 0)
          {
            --predator.y;
          }
          break;
        case 3://left
          if(predator.x > 0)
          {
            --predator.x;
          }
          break;
        case 4:
          if(predator.x < 3)
          {
            ++predator.x;
          }
          break;
      }
      board[predator.x][predator.y] = 1;
      board[predator.x + 1][predator.y] = 1;
      board[predator.x][predator.y + 1] = 1;
      board[predator.x + 1][predator.y + 1] = 1;
      predator_last_move_time = millis();      
    }
  }
}

//check if the predator wins
bool checkPredatorWin(){
  prey.coord = prey.x + prey.y * 5;
  predator.coord = predator.x + predator.y * 5;
  if (prey.coord == predator.coord || 
      prey.coord == predator.coord + 1 ||
      prey.coord == predator.coord + 5 ||
      prey.coord == predator.coord + 6)
      {
        return true;
      }
  else {
    return false;
  }
}

//update the result after each round
void updateRes(){
   for (int i = 0; i < 5; ++i){
      for (int j = 0; j < 7; ++j){
        board[i][j] = LOW;
      }
   }
   //prey wins
    if (prey.win)
    {
      if (prey.num_win == predator.num_win)
      {
        board[2][3] = 1;
        board[2][6] = 1;
      }
      else if ((prey.num_win - predator.num_win) == 1 || (prey.num_win - predator.num_win) == 2 )
      {
        board[2][3] = 1;
        board[2][6] = 1;
        board[3][6] = 1;
      }
      else if ((prey.num_win - predator.num_win) > 2)
      {
        board[2][3] = 1;
        board[2][6] = 1;
        board[3][6] = 1;
        board[4][6] = 1;
      }
      else if ((prey.num_win - predator.num_win) == -1 || (prey.num_win - predator.num_win) == -2 )
      {
        board[2][3] = 1;
        board[2][6] = 1;
        board[1][6] = 1;      
      }
      else if ((prey.num_win - predator.num_win) < -2)
      {
        board[2][3] = 1;
        board[2][6] = 1;
        board[1][6] = 1;
        board[0][6] = 1;
      }
    }
    else {
      if (prey.num_win == predator.num_win)
      {
        board[2][3] = 1;
        board[3][4] = 1;
        board[2][5] = 1;
        board[3][5] = 1;
        board[2][6] = 1;
      }
      else if ((prey.num_win - predator.num_win) == 1 || (prey.num_win - predator.num_win) == 2 )
      {
        board[2][3] = 1;
        board[3][4] = 1;
        board[2][5] = 1;
        board[3][5] = 1;
        board[2][6] = 1;
        board[1][6] = 1;        
      }
      else if ((prey.num_win - predator.num_win) > 2)
      {
        board[2][3] = 1;
        board[3][4] = 1;
        board[2][5] = 1;
        board[3][5] = 1;
        board[2][6] = 1;
        board[1][6] = 1; 
        board[0][6] = 1;       
      }
      else if ((prey.num_win - predator.num_win) == -1 || (prey.num_win - predator.num_win) == -2 )
      {
        board[2][3] = 1;
        board[3][4] = 1;
        board[2][5] = 1;
        board[3][5] = 1;
        board[2][6] = 1;
        board[3][6] = 1;
      }
      else if ((prey.num_win - predator.num_win) < -2)
      {
        board[2][3] = 1;
        board[3][4] = 1;
        board[2][5] = 1;
        board[3][5] = 1;
        board[2][6] = 1;
        board[3][6] = 1;
        board[4][6] = 1;     
      }
    }
}

//the whole process of the game
void play(){
  prey.win = false; predator.win = false;
  initBoard();
  printBoard();
  round_start_time = millis();
  while(millis() - round_start_time <= round_interval){
    preyMove();
    predatorMove();
    predatorBlink();
    printBoard();
    if (checkPredatorWin())
    {
      predator.win = true;
      ++predator.num_win;
      break;
    }
  }
  if (!predator.win)
  {
    prey.win = true;
    ++prey.num_win;
  }
  updateRes();
  result_start_time = millis();
  while (millis() - result_start_time <= result_interval){
    printBoard();
  }
}
void loop()
{
  play();
}
